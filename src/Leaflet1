import 'leaflet/dist/leaflet.css';
import { MapContainer, TileLayer, Marker, Popup, GeoJSON } from 'react-leaflet';
import L from 'leaflet';
import markerIcon from 'leaflet/dist/images/marker-icon.png';
import markerShadow from 'leaflet/dist/images/marker-shadow.png';
import 'leaflet/dist/leaflet.css';
import VirginiaGeoJson from './components/VACountiesJson';



// Fix default icon paths
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
    iconRetinaUrl: markerIcon,
    iconUrl: markerIcon,
    shadowUrl: markerShadow,
});

const fetchData = async (id, onDataFetch) => {
    console.log(id)
    try {
        const response = await fetch(`http://localhost:3001/dataCounties?id=${id}`)
        if (!response.ok) {
            throw new Error('Network response was not ok ' + response.statusText);
        }
        const data = await response.json()
        onDataFetch(data)
        console.log('Fetched data:', data);

    } catch (error) {
        console.error('There was a problem with the fetch operation:', error);
    }

}
let clickedLayer = null;
const onEachFeature = (feature, layer, onDataFetch) => {
    
    layer.on({
        click: (e) => {
            const currentLayer = e.target;
            // Check if there's a previously clicked layer
            if (clickedLayer) {
                // Revert the style of the previously clicked layer
                clickedLayer.setStyle({
                    stroke: '#000000',
                    color: 'green',
                    weight: 1.5,
                    fillOpacity: 0
                });
            }
            // Set the clicked layer as the current layer
            clickedLayer = currentLayer;
            // Apply the new style to the clicked layer
            currentLayer.setStyle({
                stroke: '#000000',
                color: "#72A26E",
                fill: '#72A26E', // Change fill color on click
                strokeWidth: 1,
                fillOpacity: 1
            });
            // Bind tooltip
            layer.bindTooltip(feature.properties.name, {
                permanent: true,
                direction: "auto"
            }).openTooltip();

            if (feature.properties && feature.properties.id) {
                fetchData(feature.properties.id, onDataFetch);
            }
            clickedLayer = layer;
            // Prevent event propagation to avoid triggering mouseout event
            e.originalEvent.stopPropagation();

            
        },
        mouseout: (e) => {
            // Don't need to handle mouseout events when a layer is clicked
            if (e.target !== clickedLayer) return;
            const layer = e.target;
            layer.setStyle({
                "stroke": "#000000", color: 'green', weight: 1.5, fillOpacity: 0
            });
            layer.unbindTooltip(); // Remove tooltip on mouseout
        }
    });
    // if (feature.properties && feature.properties.name) {
    //     layer.bindTooltip(feature.properties.name, {
    //         permanent: false,
    //         direction: "auto"
    //     });
    // }

};
const Leaflet = ({ onDataFetch }) => {
    return (
        <MapContainer center={{ lat: 37.4, lng: -78.6 }} zoom={6} scrollWheelZoom={false} style={{ height: "50vh", width: "100%" }}>
            <TileLayer
                attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            <GeoJSON data={VirginiaGeoJson} style={{ stroke: "#000000", color: 'green', weight: 1.5, fillOpacity: 0 }} onEachFeature={(feature, layer) => onEachFeature(feature, layer, onDataFetch)} />
            {/* <Marker position={[51.505, -0.09]}>
                <Popup>
                    A pretty CSS3 popup. <br /> Easily customizable.
                </Popup>
            </Marker> */}
        </MapContainer>
    );
}

export default Leaflet;
